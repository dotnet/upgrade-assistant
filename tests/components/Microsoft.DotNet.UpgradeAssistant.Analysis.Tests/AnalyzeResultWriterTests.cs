// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Sarif;
using Xunit;

namespace Microsoft.DotNet.UpgradeAssistant.Analysis.Tests
{
    public class AnalyzeResultWriterTests
    {
        [Fact]
        public async Task ShouldThrowIfResultsIsNull()
        {
            var serializer = new JsonSerializer();
            using var source = new CancellationTokenSource();
            var writer = new SarifAnalyzeResultWriter(serializer);

            _ = await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                await writer.WriteAsync(null, null, source.Token).ConfigureAwait(false);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
            }).ConfigureAwait(false);
        }

        [Fact]
        public async Task ValidateSarifMetadata()
        {
            var serializer = new JsonSerializer();
            var writer = new SarifAnalyzeResultWriter(serializer);

            var analyzeResults = new List<AnalyzeResult>
            {
                new AnalyzeResult
                {
                    FileLocation = "some-file-path",
                    LineNumber = 1,
                    ResultMessage = "some result message",
                    RuleId = "RULE0001",
                    RuleName = "RuleName0001",
                    FullDescription = "some full description",
                    HelpUri = new Uri("https://github.com/dotnet/upgrade-assistant")
                }
            };

            var analyzeResultMap = new List<AnalyzeResultDefinition>
            {
                new AnalyzeResultDefinition
                {
                    Name = "some-name",
                    Version = "1.0.0",
                    InformationUri = new Uri("https://github.com/dotnet/upgrade-assistant"),
                    AnalysisResults = analyzeResults.ToAsyncEnumerable()
                }
            };

            await writer.WriteAsync(analyzeResultMap.ToAsyncEnumerable(), null, CancellationToken.None).ConfigureAwait(false);

            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "AnalysisReport.sarif");
            if (!File.Exists(filePath))
            {
                Assert.True(false, "File wasn't exported successfully.");
            }

            var sarifLog = SarifLog.Load(filePath);
            Assert.Equal("https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json", sarifLog.SchemaUri.OriginalString);
            Assert.Equal(SarifVersion.Current, sarifLog.Version);

            var analyzeResult = analyzeResults.First();
            var rule = sarifLog.Runs[0].Tool.Driver.Rules.First();
            Assert.Equal(analyzeResult.RuleId, rule.Id);
            Assert.Equal(analyzeResult.RuleName, rule.Name);
            Assert.Equal(analyzeResult.FullDescription, rule.FullDescription.Text);
            Assert.Equal(analyzeResult.HelpUri, rule.HelpUri);
        }

        [Fact]
        public async Task ValidateSarifRuleWhenFullDescriptionIsEmpty()
        {
            var serializer = new JsonSerializer();
            using var source = new CancellationTokenSource();
            var writer = new SarifAnalyzeResultWriter(serializer);

            // This result is similar to the result generated by roslyn analyzers.
            var analyzeResults = new List<AnalyzeResult>
            {
                new AnalyzeResult
                {
                    FileLocation = "some-file-path",
                    LineNumber = 1,
                    ResultMessage = "some result message",
                    RuleId = "RULE0001",
                    RuleName = "RuleName0001",
                    HelpUri = new Uri("https://github.com/dotnet/upgrade-assistant")
                },
                new AnalyzeResult
                {
                    FileLocation = "some-file-path-2",
                    LineNumber = 1,
                    ResultMessage = "some result message",
                    RuleId = "RULE0002",
                    RuleName = "RuleName0002",
                    HelpUri = new Uri("https://github.com/dotnet/upgrade-assistant")
                }
            };

            var analyzeResultMap = new List<AnalyzeResultDefinition>
            {
                new AnalyzeResultDefinition
                {
                    Name = "some-name",
                    Version = "1.0.0",
                    InformationUri = new Uri("https://github.com/dotnet/upgrade-assistant"),
                    AnalysisResults = analyzeResults.ToAsyncEnumerable()
                }
            };

            await writer.WriteAsync(analyzeResultMap.ToAsyncEnumerable(), null, source.Token).ConfigureAwait(false);

            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "AnalysisReport.sarif");
            if (!File.Exists(filePath))
            {
                Assert.True(false, "File wasn't exported successfully.");
            }

            var sarifLog = SarifLog.Load(filePath);
            Assert.Equal("https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json", sarifLog.SchemaUri.OriginalString);
            Assert.Equal(SarifVersion.Current, sarifLog.Version);

            Assert.Equal(analyzeResults.Count, sarifLog.Runs[0].Tool.Driver.Rules.Count);

            var firstAnalyzeResult = analyzeResults.First();
            var firstRule = sarifLog.Runs[0].Tool.Driver.Rules.First();
            Assert.Equal(firstAnalyzeResult.RuleId, firstRule.Id);
            Assert.Equal(firstAnalyzeResult.RuleName, firstRule.FullDescription.Text);
            Assert.Equal(firstAnalyzeResult.HelpUri, firstRule.HelpUri);

            var lastAnalyzeResult = analyzeResults.Last();
            var lastRule = sarifLog.Runs[0].Tool.Driver.Rules.Last();
            Assert.Equal(lastAnalyzeResult.RuleId, lastRule.Id);
            Assert.Equal(lastAnalyzeResult.RuleName, lastRule.FullDescription.Text);
            Assert.Equal(lastAnalyzeResult.HelpUri, lastRule.HelpUri);
        }

        [Fact]
        public async Task ValidateHTML()
        {
            var serializer = new JsonSerializer();
            var writer = new SarifAnalyzeResultWriter(serializer);

            var analyzeResults = new List<AnalyzeResult>
            {
                new AnalyzeResult
                {
                    FileLocation = "some-file-path",
                    LineNumber = 1,
                    ResultMessage = "some result message",
                    RuleId = "RULE0001",
                    RuleName = "RuleName0001"
                }
            };

            var analyzeResultMap = new List<AnalyzeResultDefinition>
            {
                new AnalyzeResultDefinition
                {
                    Name = "some-name",
                    Version = "1.0.0",
                    InformationUri = new Uri("https://github.com/dotnet/upgrade-assistant"),
                    AnalysisResults = analyzeResults.ToAsyncEnumerable()
                }
            };

            await writer.WriteAsync(analyzeResultMap.ToAsyncEnumerable(), "html", CancellationToken.None).ConfigureAwait(false);

            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "AnalysisReport.html");
            if (!File.Exists(filePath))
            {
                Assert.True(false, "File wasn't exported successfully.");
            }
        }
    }
}
