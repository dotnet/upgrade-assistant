public static void Main()
{
            var builder = WebApplication.CreateBuilder();

            // Set up port (previously this was done in configuration,
            // but CoreWCF requires it be done in code)
            builder.WebHost.UseNetTcp(8090);
            builder.WebHost.ConfigureKestrel(options =>
            {
                options.ListenAnyIP(8733);
                options.ListenAnyIP(8800, listenOptions =>
                {
                    X509Store store = new X509Store(StoreName.AddressBook, StoreLocation.CurrentUser);
                    store.Open(OpenFlags.ReadOnly);
                    X509Certificate2Collection certs = store.Certificates.Find(X509FindType.FindBySubjectName, "certificateValue", false);
                    listenOptions.UseHttps(new X509Certificate2(certs[0]));
                });
            });

            // Add CoreWCF services to the ASP.NET Core app's DI container
            builder.Services.AddServiceModelServices()
                            .AddServiceModelConfigurationManagerFile("wcf.config")
                            .AddServiceModelMetadata()
                            .AddTransient<WcfServiceLibrary1.Service1>();

            var app = builder.Build();

            // Enable getting metadata/wsdl
            var serviceMetadataBehavior = app.Services.GetRequiredService<ServiceMetadataBehavior>();
            serviceMetadataBehavior.HttpGetEnabled = true;
            serviceMetadataBehavior.HttpGetUrl = new Uri("http://localhost:8733/Service1/metadata");
            serviceMetadataBehavior.HttpsGetEnabled = true;
            serviceMetadataBehavior.HttpsGetUrl = new Uri("https://localhost:8800/metadata");

            // Configure CoreWCF endpoints in the ASP.NET Core hosts
            app.UseServiceModel(serviceBuilder =>
            {
                serviceBuilder.AddService<WcfServiceLibrary1.Service1>(serviceOptions => 
                {
                    serviceOptions.DebugBehavior.IncludeExceptionDetailInFaults = true;
                });

                serviceBuilder.ConfigureServiceHostBase<WcfServiceLibrary1.Service1>(varName =>
                {
                    int UA_placeHolder;
                    host.Credentials.UserNameAuthentication.UserNamePasswordValidationMode = UserNamePasswordValidationMode.Custom;
                    host.Credentials.UserNameAuthentication.CustomUserNamePasswordValidator = new MyType();
                    host.Credentials.WindowsAuthentication.IncludeWindowsGroups = false;
                });

            });
            
            await app.StartAsync();
            await app.StopAsync();
}