//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using BeanTrader;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "BeanTraderService", CallbackContract = typeof(IBeanTraderCallback), SessionMode = System.ServiceModel.SessionMode.Required)]
public interface BeanTraderService
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/ListenForTradeOffers", ReplyAction = "http://tempuri.org/BeanTraderService/ListenForTradeOffersResponse")]
    BeanTrader.Models.TradeOffer[] ListenForTradeOffers();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/ListenForTradeOffers", ReplyAction = "http://tempuri.org/BeanTraderService/ListenForTradeOffersResponse")]
    System.Threading.Tasks.Task<BeanTrader.Models.TradeOffer[]> ListenForTradeOffersAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/GetCurrentTraderInfo", ReplyAction = "http://tempuri.org/BeanTraderService/GetCurrentTraderInfoResponse")]
    BeanTrader.Models.Trader GetCurrentTraderInfo();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/GetCurrentTraderInfo", ReplyAction = "http://tempuri.org/BeanTraderService/GetCurrentTraderInfoResponse")]
    System.Threading.Tasks.Task<BeanTrader.Models.Trader> GetCurrentTraderInfoAsync();

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/BeanTraderService/Login")]
    void Login(string name);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/BeanTraderService/Login")]
    System.Threading.Tasks.Task LoginAsync(string name);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/BeanTraderService/Logout")]
    void Logout();

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/BeanTraderService/Logout")]
    System.Threading.Tasks.Task LogoutAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/GetTraderNames", ReplyAction = "http://tempuri.org/BeanTraderService/GetTraderNamesResponse")]
    System.Collections.Generic.Dictionary<System.Guid, string> GetTraderNames(System.Guid[] traderId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/GetTraderNames", ReplyAction = "http://tempuri.org/BeanTraderService/GetTraderNamesResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetTraderNamesAsync(System.Guid[] traderId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/AcceptTrade", ReplyAction = "http://tempuri.org/BeanTraderService/AcceptTradeResponse")]
    bool AcceptTrade(System.Guid offerId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/AcceptTrade", ReplyAction = "http://tempuri.org/BeanTraderService/AcceptTradeResponse")]
    System.Threading.Tasks.Task<bool> AcceptTradeAsync(System.Guid offerId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/OfferTrade", ReplyAction = "http://tempuri.org/BeanTraderService/OfferTradeResponse")]
    System.Guid OfferTrade(BeanTrader.Models.TradeOffer offer);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/OfferTrade", ReplyAction = "http://tempuri.org/BeanTraderService/OfferTradeResponse")]
    System.Threading.Tasks.Task<System.Guid> OfferTradeAsync(BeanTrader.Models.TradeOffer offer);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/CancelTradeOffer", ReplyAction = "http://tempuri.org/BeanTraderService/CancelTradeOfferResponse")]
    bool CancelTradeOffer(System.Guid offerId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/BeanTraderService/CancelTradeOffer", ReplyAction = "http://tempuri.org/BeanTraderService/CancelTradeOfferResponse")]
    System.Threading.Tasks.Task<bool> CancelTradeOfferAsync(System.Guid offerId);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/BeanTraderService/StopListening")]
    void StopListening();

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/BeanTraderService/StopListening")]
    System.Threading.Tasks.Task StopListeningAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface BeanTraderServiceChannel : BeanTraderService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class BeanTraderServiceClient : System.ServiceModel.DuplexClientBase<BeanTraderService>, BeanTraderService
{

    public BeanTraderServiceClient(System.ServiceModel.InstanceContext callbackInstance) :
            base(callbackInstance)
    {
    }

    public BeanTraderServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) :
            base(callbackInstance, endpointConfigurationName)
    {
    }

    public BeanTraderServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) :
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public BeanTraderServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public BeanTraderServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(callbackInstance, binding, remoteAddress)
    {
    }

    public BeanTrader.Models.TradeOffer[] ListenForTradeOffers()
    {
        return base.Channel.ListenForTradeOffers();
    }

    public System.Threading.Tasks.Task<BeanTrader.Models.TradeOffer[]> ListenForTradeOffersAsync()
    {
        return base.Channel.ListenForTradeOffersAsync();
    }

    public BeanTrader.Models.Trader GetCurrentTraderInfo()
    {
        return base.Channel.GetCurrentTraderInfo();
    }

    public System.Threading.Tasks.Task<BeanTrader.Models.Trader> GetCurrentTraderInfoAsync()
    {
        return base.Channel.GetCurrentTraderInfoAsync();
    }

    public void Login(string name)
    {
        base.Channel.Login(name);
    }

    public System.Threading.Tasks.Task LoginAsync(string name)
    {
        return base.Channel.LoginAsync(name);
    }

    public void Logout()
    {
        base.Channel.Logout();
    }

    public System.Threading.Tasks.Task LogoutAsync()
    {
        return base.Channel.LogoutAsync();
    }

    public System.Collections.Generic.Dictionary<System.Guid, string> GetTraderNames(System.Guid[] traderId)
    {
        return base.Channel.GetTraderNames(traderId);
    }

    public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetTraderNamesAsync(System.Guid[] traderId)
    {
        return base.Channel.GetTraderNamesAsync(traderId);
    }

    public bool AcceptTrade(System.Guid offerId)
    {
        return base.Channel.AcceptTrade(offerId);
    }

    public System.Threading.Tasks.Task<bool> AcceptTradeAsync(System.Guid offerId)
    {
        return base.Channel.AcceptTradeAsync(offerId);
    }

    public System.Guid OfferTrade(BeanTrader.Models.TradeOffer offer)
    {
        return base.Channel.OfferTrade(offer);
    }

    public System.Threading.Tasks.Task<System.Guid> OfferTradeAsync(BeanTrader.Models.TradeOffer offer)
    {
        return base.Channel.OfferTradeAsync(offer);
    }

    public bool CancelTradeOffer(System.Guid offerId)
    {
        return base.Channel.CancelTradeOffer(offerId);
    }

    public System.Threading.Tasks.Task<bool> CancelTradeOfferAsync(System.Guid offerId)
    {
        return base.Channel.CancelTradeOfferAsync(offerId);
    }

    public void StopListening()
    {
        base.Channel.StopListening();
    }

    public System.Threading.Tasks.Task StopListeningAsync()
    {
        return base.Channel.StopListeningAsync();
    }
}