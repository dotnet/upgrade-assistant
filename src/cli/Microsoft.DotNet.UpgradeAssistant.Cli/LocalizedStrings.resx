<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddExtensionDetails" xml:space="preserve">
    <value>Adding extension {Name} from {Source}</value>
  </data>
  <data name="AddExtensionFailed" xml:space="preserve">
    <value>Could not find extension {Name} from {Source}</value>
  </data>
  <data name="AddExtensionSuccess" xml:space="preserve">
    <value>Added extension {Name} from {Source}</value>
  </data>
  <data name="AnalysisCompleteMessage" xml:space="preserve">
    <value>Analysis Complete, the report is available at {0}</value>
    <comment>0 - Filename</comment>
  </data>
  <data name="BinaryAnalysisAllowPrereleaseHelp" xml:space="preserve">
    <value>Allow pre-release packages to be considered as an option for support of the target framework/platform combination</value>
  </data>
  <data name="BinaryAnalysisContentHelp" xml:space="preserve">
    <value>The binary file(s) or directory(ies) to analyze for compatibility</value>
  </data>
  <data name="BinaryAnalysisObsoletedApisHelp" xml:space="preserve">
    <value>Include information about obsoleted APIs</value>
  </data>
  <data name="BinaryAnalysisPlatformHelp" xml:space="preserve">
    <value>The OS platform(s) to check availability for (e.g. linux windows)</value>
  </data>
  <data name="BinaryAnalysisTargetFrameworkHelp" xml:space="preserve">
    <value>The target framework(s) for which to analyze for compatibility (e.g. net5.0 net6.0)</value>
  </data>
  <data name="ExtensionManagementName" xml:space="preserve">
    <value>Name of extension</value>
  </data>
  <data name="ExtensionManagementNoQuery" xml:space="preserve">
    <value>No query provided for search.</value>
  </data>
  <data name="ExtensionManagementSearch" xml:space="preserve">
    <value>{Name} v{Version}</value>
  </data>
  <data name="ExtensionManagementSource" xml:space="preserve">
    <value>Source of extension</value>
  </data>
  <data name="ExtensionManagementVersion" xml:space="preserve">
    <value>Version of extension</value>
  </data>
  <data name="FeaturesDisclaimer" xml:space="preserve">
    <value>Features are subject to change and may be disabled in a subsequent release.</value>
  </data>
  <data name="FeaturesListHeader" xml:space="preserve">
    <value>Features are registered in the environment variable `UA_FEATURES`. Below are available features:</value>
  </data>
  <data name="FeaturesListOptionHelp" xml:space="preserve">
    <value>List available feature flags and status</value>
  </data>
  <data name="FeaturesListOptionRequired" xml:space="preserve">
    <value>Specify --list option to list available features.</value>
  </data>
  <data name="ListExtensionDetails" xml:space="preserve">
    <value>Current extensions:</value>
  </data>
  <data name="ListExtensionItem" xml:space="preserve">
    <value>{Name}: {Source}</value>
  </data>
  <data name="NonWindowsWarning" xml:space="preserve">
    <value>This tool is not supported on non-Windows platforms due to dependencies on Visual Studio.</value>
  </data>
  <data name="RemovingExtension" xml:space="preserve">
    <value>Removing extension '{Name}'</value>
  </data>
  <data name="RemovingExtensionFailed" xml:space="preserve">
    <value>Could not remove extension '{Name}'</value>
  </data>
  <data name="RequestedFormatUnavailableMessage" xml:space="preserve">
    <value>Requested format '{0}' is unavailable</value>
    <comment>0 - File format requested by user</comment>
  </data>
  <data name="SurveyText" xml:space="preserve">
    <value>We are interested in your feedback! Please use the following link to open a survey: https://aka.ms/DotNetUASurvey</value>
  </data>
  <data name="UpdateExtensionDetails" xml:space="preserve">
    <value>Searching for updates for {Name}</value>
  </data>
  <data name="UpdateExtensionFailed" xml:space="preserve">
    <value>Could not find an update for extension {Name}</value>
  </data>
  <data name="UpdateExtensionSuccess" xml:space="preserve">
    <value>Found an update for {Name} to {Version}</value>
  </data>
  <data name="UpgradeAssistantCommandEntrypoint" xml:space="preserve">
    <value>Provides the entry-point project to start the upgrade process. This may include globbing patterns such as '*' for match.</value>
  </data>
  <data name="UpgradeAssistantCommandExtension" xml:space="preserve">
    <value>Specifies a .NET Upgrade Assistant extension package to include. This could be an ExtensionManifest.json file, a directory containing an ExtensionManifest.json file, or a zip archive containing an extension. This option can be specified multiple times.</value>
  </data>
  <data name="UpgradeAssistantCommandFormat" xml:space="preserve">
    <value>Specify format of analyze result. If not provided, a sarif file will be produced. Available default values: "sarif", "html"</value>
  </data>
  <data name="UpgradeAssistantCommandIgnoreUnsupported" xml:space="preserve">
    <value>Acknowledges that upgrade-assistant will not be able to completely upgrade a project. This indicates that the solution must be redesigned (e.g. consider Blazor to replace Web Forms).</value>
  </data>
  <data name="UpgradeAssistantCommandMsbuild" xml:space="preserve">
    <value>Path to a MSBuild install directory to be used. If not provided, the latest installed version will be used.</value>
  </data>
  <data name="UpgradeAssistantCommandOption" xml:space="preserve">
    <value>Specifies an option that should be added to Upgrade Assistant that may be used by extensions.</value>
  </data>
  <data name="UpgradeAssistantCommandProject" xml:space="preserve">
    <value>The path to a project or solution file to be used.</value>
  </data>
  <data name="UpgradeAssistantCommandTargetTfm" xml:space="preserve">
    <value>Select if you would like the Long Term Support (LTS), Standard Term Support (STS), or Preview TFM. See https://dotnet.microsoft.com/platform/support/policy/dotnet-core for details on what these mean.</value>
  </data>
  <data name="UpgradeAssistantCommandVS" xml:space="preserve">
    <value>Path to a VS install directory to be used for %VSINSTALLDIR%. If not provided, the latest installed version will be used.</value>
  </data>
  <data name="UpgradeAssistantHeader" xml:space="preserve">
    <value>Microsoft .NET Upgrade Assistant v{0}</value>
  </data>
  <data name="UpgradeAssistantHeaderDetails" xml:space="preserve">
    <value>Makes a best-effort attempt to upgrade .NET Framework projects to current, preview, or LTS versions of .NET.
 
This tool does not completely automate the upgrade process and it is expected that projects will have build errors after the tool runs. Manual changes will be required to complete the upgrade.

This tool's purpose is to automate some of the 'routine' upgrade tasks such as changing project file formats and updating APIs with near-equivalents in the selected target framework. Analyzers added to the project will highlight the remaining changes needed after the tool runs.</value>
  </data>
  <data name="VerboseCommand" xml:space="preserve">
    <value>Enable verbose diagnostics</value>
  </data>
  <data name="WritingOutputMessage" xml:space="preserve">
    <value>Writing output to {0}</value>
    <comment>0 - Filename</comment>
  </data>
</root>