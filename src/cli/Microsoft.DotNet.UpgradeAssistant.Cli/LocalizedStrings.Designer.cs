//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.DotNet.UpgradeAssistant.Cli {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class LocalizedStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal LocalizedStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.DotNet.UpgradeAssistant.Cli.LocalizedStrings", typeof(LocalizedStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding extension {Name} from {Source}.
        /// </summary>
        internal static string AddExtensionDetails {
            get {
                return ResourceManager.GetString("AddExtensionDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find extension {Name} from {Source}.
        /// </summary>
        internal static string AddExtensionFailed {
            get {
                return ResourceManager.GetString("AddExtensionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Added extension {Name} from {Source}.
        /// </summary>
        internal static string AddExtensionSuccess {
            get {
                return ResourceManager.GetString("AddExtensionSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of extension.
        /// </summary>
        internal static string ExtensionManagementName {
            get {
                return ResourceManager.GetString("ExtensionManagementName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No query provided for search..
        /// </summary>
        internal static string ExtensionManagementNoQuery {
            get {
                return ResourceManager.GetString("ExtensionManagementNoQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Name} v{Version}.
        /// </summary>
        internal static string ExtensionManagementSearch {
            get {
                return ResourceManager.GetString("ExtensionManagementSearch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source of extension.
        /// </summary>
        internal static string ExtensionManagementSource {
            get {
                return ResourceManager.GetString("ExtensionManagementSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version of extension.
        /// </summary>
        internal static string ExtensionManagementVersion {
            get {
                return ResourceManager.GetString("ExtensionManagementVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current extensions:.
        /// </summary>
        internal static string ListExtensionDetails {
            get {
                return ResourceManager.GetString("ListExtensionDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Name}: {Source}.
        /// </summary>
        internal static string ListExtensionItem {
            get {
                return ResourceManager.GetString("ListExtensionItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This tool is not supported on non-Windows platforms due to dependencies on Visual Studio..
        /// </summary>
        internal static string NonWindowsWarning {
            get {
                return ResourceManager.GetString("NonWindowsWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removing extension &apos;{Name}&apos;.
        /// </summary>
        internal static string RemovingExtension {
            get {
                return ResourceManager.GetString("RemovingExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not remove extension &apos;{Name}&apos;.
        /// </summary>
        internal static string RemovingExtensionFailed {
            get {
                return ResourceManager.GetString("RemovingExtensionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We are interested in your feedback! Please use the following link to open a survey: https://aka.ms/DotNetUASurvey.
        /// </summary>
        internal static string SurveyText {
            get {
                return ResourceManager.GetString("SurveyText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Searching for updates for {Name}.
        /// </summary>
        internal static string UpdateExtensionDetails {
            get {
                return ResourceManager.GetString("UpdateExtensionDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find an update for extension {Name}.
        /// </summary>
        internal static string UpdateExtensionFailed {
            get {
                return ResourceManager.GetString("UpdateExtensionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found an update for {Name} to {Version}.
        /// </summary>
        internal static string UpdateExtensionSuccess {
            get {
                return ResourceManager.GetString("UpdateExtensionSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides the entry-point project to start the upgrade process. This may include globbing patterns such as &apos;*&apos; for match..
        /// </summary>
        internal static string UpgradeAssistantCommandEntrypoint {
            get {
                return ResourceManager.GetString("UpgradeAssistantCommandEntrypoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a .NET Upgrade Assistant extension package to include. This could be an ExtensionManifest.json file, a directory containing an ExtensionManifest.json file, or a zip archive containing an extension. This option can be specified multiple times..
        /// </summary>
        internal static string UpgradeAssistantCommandExtension {
            get {
                return ResourceManager.GetString("UpgradeAssistantCommandExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Acknowledges that upgrade-assistant will not be able to completely upgrade a project. This indicates that the solution must be redesigned (e.g. consider Blazor to replace Web Forms)..
        /// </summary>
        internal static string UpgradeAssistantCommandIgnoreUnsupported {
            get {
                return ResourceManager.GetString("UpgradeAssistantCommandIgnoreUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to a MSBuild install directory to be used. If not provided, the latest installed version will be used..
        /// </summary>
        internal static string UpgradeAssistantCommandMsbuild {
            get {
                return ResourceManager.GetString("UpgradeAssistantCommandMsbuild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies an option that should be added to Upgrade Assistant that may be used by extensions..
        /// </summary>
        internal static string UpgradeAssistantCommandOption {
            get {
                return ResourceManager.GetString("UpgradeAssistantCommandOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to a project or solution file to be used..
        /// </summary>
        internal static string UpgradeAssistantCommandProject {
            get {
                return ResourceManager.GetString("UpgradeAssistantCommandProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select if you would like the Long Term Support (LTS), Current, or Preview TFM. See https://dotnet.microsoft.com/platform/support/policy/dotnet-core for details for what these mean..
        /// </summary>
        internal static string UpgradeAssistantCommandTargetTfm {
            get {
                return ResourceManager.GetString("UpgradeAssistantCommandTargetTfm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to a VS install directory to be used for %VSINSTALLDIR%. If not provided, the latest installed version will be used..
        /// </summary>
        internal static string UpgradeAssistantCommandVS {
            get {
                return ResourceManager.GetString("UpgradeAssistantCommandVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft .NET Upgrade Assistant v{0}.
        /// </summary>
        internal static string UpgradeAssistantHeader {
            get {
                return ResourceManager.GetString("UpgradeAssistantHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes a best-effort attempt to upgrade .NET Framework projects to current, preview or LTS versions of .NET.
        /// 
        ///This tool does not completely automate the upgrade process and it is expected that projects will have build errors after the tool runs. Manual changes will be required to complete the upgrade to .NET 6.
        ///
        ///This tool&apos;s purpose is to automate some of the &apos;routine&apos; upgrade tasks such as changing project file formats and updating APIs with near-equivalents in the selected target framework. Analyzers a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UpgradeAssistantHeaderDetails {
            get {
                return ResourceManager.GetString("UpgradeAssistantHeaderDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable verbose diagnostics.
        /// </summary>
        internal static string VerboseCommand {
            get {
                return ResourceManager.GetString("VerboseCommand", resourceCulture);
            }
        }
    }
}
