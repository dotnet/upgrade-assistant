// Package maps are json arrays
[
  // Each element of the array defines one 'package map' rule
  {
    // Package maps have names which are used in Upgrade Assistant output
    "PackageSetName": "First sample",

    // This boolean indicates whether the package map replacements work
    // while targeting .NET Framework or if the project must be upgraded
    // to .NET 5/.NET Standard before the package maps should be applied.
    "NetCorePackagesWorkOnNetFx": true,

    // The NetFrameworkPackages array lists package references that should be removed.
    // If any of these package references are found, the will be removed.
    "NetFrameworkPackages": [
      {
        "Name": "MyCompany.Package1",

        // A version of "*" means to remove references to any versions of the package.
        // A version other than "*" means to only remove references if their version
        // is less than or equal to that version (useful in cases where new versions
        // work on .NET 5 but older versions don't).
        "Version": "*"
      }
    ],
    // The NetCorePackages array lists package references that should be added.
    // If any of the 'NetFrameworkPackages' references are present in a project,
    // the NetCorePackages references will be added instead.
    "NetCorePackages": [
      {
        "Name": "MyCompany.Package1.Core",
        "Version": "1.1.0-preview.1"
      }
    ]
  },


  // Pacakage maps without a NetCorePackages element will remove the
  // NetFxFrameworkPacakges without adding any replacements.
  {
    "PackageSetName": "Package removal sample",
    "NetCorePackagesWorkOnNetFx": false,

    "NetFrameworkPackages": [
      {
        "Name": "MyCompany.Package2",
        "Version": "*"
      }
    ],
    // Because NetCorePackages is empty, this package map rule will
    // remove references to MyCompany.Package2 and not add anything
    // in their place.
    "NetCorePackages": []
  }
]