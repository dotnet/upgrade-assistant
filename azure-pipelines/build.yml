name: $(Date:yyyyMMdd).$(Rev:r)
parameters:
- name: OfficialRelease
  displayName: "Build and publish an official release"
  type: boolean
  default: false
variables:
- name: Build.OfficialRelease
  value: ${{ parameters.OfficialRelease }}
- name: Codeql.Enabled
  value: true
- name: SignType
  ${{ if eq(parameters.OfficialRelease, true) }}:
    value: real
  ${{ else }}:
    value: test
- name: TeamName
  value: dotnetupgradeassistant
- name: TimestampPackage
  value: ${{ not (parameters.OfficialRelease) }}
trigger:
  branches:
    include:
    - refs/heads/main
resources:
  repositories:
  - repository: MicroBuildTemplate
    type: git
    name: 1ESPipelineTemplates/MicroBuildTemplate
    ref: refs/tags/release
extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    sdl:
      sourceAnalysisPool:
        name: AzurePipelines-EO
        image: 1ESPT-Windows2022
        os: windows
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: Build
      jobs:
      - job: Build
        displayName: 'Build'
        cancelTimeoutInMinutes: 1
        pool:
          name: VSEngSS-MicroBuild2022-1ES
        templateContext:
          mb:
            signing:
              enabled: true
              signType: $(SignType)
            sbom:
              enabled: true
          outputs:
          - output: nuget
            displayName: 'NuGet push to NuGet.org'
            condition: and(succeeded(), eq(variables['Build.OfficialRelease'], 'true'))
            packageParentPath: '$(Build.ArtifactStagingDirectory)\Packages'
            packagesToPush: $(Build.ArtifactStagingDirectory)\Packages\*.nupkg;!$(Build.ArtifactStagingDirectory)\Packages\*.symbols.nupkg
            nuGetFeedType: external
            publishFeedCredentials: UpgradeAssistantExtensions-NuGet.org
        steps:
        - checkout: self
          clean: true
          fetchTags: false
          persistCredentials: true
        - task: DeleteFiles@1
          displayName: Delete output files from src
          inputs:
            SourceFolder: src
            Contents: |-
              **\bin\**\*
              **\obj\**\*
        - task: UseDotNet@2
          displayName: Use .NET Core SDK 8.x
          inputs:
            version: 8.x
            performMultiLevelLookup: true
        - task: NuGetToolInstaller@1
          displayName: Use NuGet 6.x
          inputs:
            versionSpec: 6.x
        - task: NuGetAuthenticate@1
          displayName: NuGet Authenticate
        - task: NuGetCommand@2
          displayName: NuGet restore
          inputs:
            solution: UpgradeAssistant.Extensions.sln
        - task: VSBuild@1
          displayName: Build UpgradeAssistant.Extensions.sln
          inputs:
            solution: UpgradeAssistant.Extensions.sln
            platform: Any CPU
            configuration: Release
            clean: true
            msbuildArgs: /p:PublicRelease=$(Build.OfficialRelease)
        - task: VSTest@2
          displayName: Run Unit Tests
          inputs:
            testAssemblyVer2: |-
              **\UpgradeAssistant.*.Tests.dll
        - task: MicroBuildSigningPlugin@4
          inputs:
            signType: '$(SignType)'
            feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
          env:
            TeamName: '$(TeamName)'
        - task: VSBuild@1
          displayName: Build Mappings NuGet package
          inputs:
            solution: src\UpgradeAssistant.Mappings\UpgradeAssistant.Mappings.csproj
            msbuildArgs: /t:Pack /p:PublicRelease=$(Build.OfficialRelease) /p:TimestampPackage=$(TimestampPackage) /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)\UnsignedPackages"
            configuration: release
        - task: MSBuild@1
          displayName: 'Sign Mappings NuGet Package'
          inputs:
            solution: 'azure-pipelines\nuget-package.signproj'
            msbuildArguments: '/p:OutDir=$(Build.ArtifactStagingDirectory)\Packages /p:UnsignedPackagesPath=$(Build.ArtifactStagingDirectory)\UnsignedPackages'
